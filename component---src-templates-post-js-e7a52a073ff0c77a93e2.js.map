{"version":3,"sources":["webpack:///./src/templates/post.js","webpack:///./src/templates/post.module.css","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["Post","props","postNode","data","markdownRemark","post","frontmatter","title","className","styles","blogPost","to","date","content","dangerouslySetInnerHTML","__html","html","postQuery","module","exports","Header","siteTitle","style","background","marginBottom","margin","maxWidth","padding","color","textDecoration","defaultProps","Layout","children","useStaticQuery","site","siteMetadata","marginTop","Date","getFullYear","href","SEO","description","lang","meta","metaDescription","defaultTitle","htmlAttributes","titleTemplate","name","property","author","concat"],"mappings":"8FAAA,mIA4BeA,UAtBF,SAAAC,GACX,IAAMC,EAAWD,EAAME,KAAKC,eACtBC,EAAOH,EAASI,YAEtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAK,GAAKF,EAAKE,QACpB,6BAASC,UAAWC,IAAOC,UACzB,kBAAC,OAAD,CAAMC,GAAG,KAAT,4DAGA,wBAAIH,UAAWC,IAAOF,OAAQF,EAAKE,OACnC,wBAAIC,UAAWC,IAAOG,MAAOP,EAAKO,MAClC,yBACEJ,UAAWC,IAAOI,QAClBC,wBAAyB,CAAEC,OAAQb,EAASc,WAS/C,IAAMC,EAAS,c,uBC7BtBC,EAAOC,QAAU,CAAC,SAAW,+BAA+B,MAAQ,4BAA4B,QAAU,gC,gGCGpGC,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACb,4BACEC,MAAO,CACLC,WAAY,QACZC,aAAa,YAGf,yBACEF,MAAO,CACLG,OAAO,SACPC,SAAU,IACVC,QAAQ,sBAGV,wBAAIL,MAAO,CAAEG,OAAQ,IACnB,kBAAC,OAAD,CACEd,GAAG,IACHW,MAAO,CACLM,MAAM,QACNC,eAAe,SAGhBR,OAWXD,EAAOU,aAAe,CACpBT,UAAU,IAGGD,Q,UCuBAW,IA5CC,SAAC,GAAkB,IAAD,EAAfC,EAAe,EAAfA,SACX7B,EAAO8B,yBAAe,cAU5B,OACE,oCACE,kBAAC,EAAD,CAAQZ,WAAW,UAAAlB,EAAK+B,KAAKC,oBAAV,eAAwB5B,QAAxB,UACnB,yBACEe,MAAO,CACLG,OAAO,SACPC,SAAU,IACVC,QAAQ,wBAGV,0BAAMnB,UAAY,UAAUwB,GAC5B,4BAAQV,MAAO,CACbc,UAAU,SADZ,MAGK,IAAIC,MAAOC,cAHhB,6BAKE,uBAAGC,KAAK,4BAAR,e,kCC/CV,iDAYA,SAASC,EAAT,GAAkD,IAAD,IAAlCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMpC,EAAS,EAATA,MAC9B2B,EAASD,yBAAe,YAAxBC,KAcFU,EAAkBH,GAAeP,EAAKC,aAAaM,YACnDI,EAAY,UAAGX,EAAKC,oBAAR,aAAG,EAAmB5B,MAExC,OACE,kBAAC,IAAD,CACEuC,eAAgB,CACdJ,QAEFnC,MAAOA,EACPwC,cAAeF,EAAY,QAAWA,EAAiB,KACvDF,KAAM,CACJ,CACEK,KAAK,cACLnC,QAAS+B,GAEX,CACEK,SAAS,WACTpC,QAASN,GAEX,CACE0C,SAAS,iBACTpC,QAAS+B,GAEX,CACEK,SAAS,UACTpC,QAAQ,WAEV,CACEmC,KAAK,eACLnC,QAAQ,WAEV,CACEmC,KAAK,kBACLnC,SAAS,UAAAqB,EAAKC,oBAAL,eAAmBe,SAAnB,IAEX,CACEF,KAAK,gBACLnC,QAASN,GAEX,CACEyC,KAAK,sBACLnC,QAAS+B,IAEXO,OAAOR,KAKfH,EAAIV,aAAe,CACjBY,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD","file":"component---src-templates-post-js-e7a52a073ff0c77a93e2.js","sourcesContent":["import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport Layout from '../components/layout'\nimport styles from './post.module.css';\nimport SEO from '../components/seo';\n\nconst Post = props => {\n  const postNode = props.data.markdownRemark;\n  const post = postNode.frontmatter;\n\n  return (\n    <Layout>\n      <SEO title={`${post.title}`} />\n      <article className={styles.blogPost}>\n        <Link to=\"/\">\n          Gatsby Starter - Minimal Blog | Get back to the overview\n        </Link>\n        <h1 className={styles.title}>{post.title}</h1>\n        <h4 className={styles.date}>{post.date}</h4>\n        <div\n          className={styles.content}\n          dangerouslySetInnerHTML={{ __html: postNode.html }}\n        />\n      </article>\n    </Layout>\n  );\n};\n\nexport default Post;\n\nexport const postQuery = graphql`\n  query postBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        date(formatString: \"DD.MM.YYYY\")\n      }\n    }\n  }\n`;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blogPost\":\"post-module--blogPost--Wg4nK\",\"title\":\"post-module--title--_4a8P\",\"content\":\"post-module--content--2Opks\"};","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: 'green',\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\n//import Helmet from 'react-helmet';\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n//import theme from '../../config/Theme';\n//import styled, { ThemeProvider, injectGlobal } from 'styled-components';\n\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\n\n\n const Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata?.title || `Title`} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0 1.0875rem 1.45rem`,\n        }}\n      >\n        <main className = 'layout'>{children}</main>\n        <footer style={{\n          marginTop: `2rem`\n        }}>\n          Â© {new Date().getFullYear()}, Built by a tree with\n          {` `}\n          <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n        </footer>\n      </div>\n    </>\n  )\n} \n\n\n\n\n\n\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.author || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}